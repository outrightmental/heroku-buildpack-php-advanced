#!/bin/bash

set -e
shopt -s dotglob

basedir="$( cd -P "$( dirname "$0" )" && pwd )"

source "$basedir/../conf/buildpack.conf"

if [ -n "$BUILDPACK_DEBUG" ]; then
    set -x
fi

function fetch_package() {
    local engine="$1"
    local version="$2"
    local location="$3"

    mkdir -p "$location"

    local package="http://${S3_BUCKET}.s3.amazonaws.com/package/${engine}-${version}.tgz"

    curl "$package" -L -s -o - | tar xzf - -C "$location"
}

function fetch_package_apache() {
    local APACHE_VERSION="$1"
    local location="$2"

    mkdir -p "$location"

    local package="https://s3.amazonaws.com/php-lp/apache-$APACHE_VERSION.tar.gz"

    curl "$package" -L -s -o - | tar xzf - -C "$location"
}


function indent() {
    c='s/^/       /'
    case $(uname) in
        Darwin) sed -l "$c";;
        *)      sed -u "$c";;
    esac
}

function install_composer_deps() {
    local cwd=$(pwd)
    local target="$1"

    if [ ! -f "$target/composer.json" ]; then
        return 0
    fi

    export COMPOSER_CACHE_DIR=$CACHE_DIR/composer
    mkdir -p $COMPOSER_CACHE_DIR

    echo "-----> Vendoring Composer"
    {
        mkdir -p "$target/app/vendor/composer/bin"
        curl -L "http://getcomposer.org/composer.phar" > "$target/app/vendor/composer/bin/composer.phar"
        chmod a+x "$target/app/vendor/composer/bin/composer.phar"
    } | indent

    echo "-----> Installing application dependencies with Composer"
    {
        cd "$target"
        "$BUILD_DIR/vendor/php/bin/php" \
            "$target/app/vendor/composer/bin/composer.phar" install \
            --prefer-dist \
            --optimize-autoloader \
            --no-interaction

        cd "$cwd"
    } | indent
}

function mktmpdir() {
    dir=$(mktemp -t php-$1-XXXX)
    rm -rf $dir
    mkdir -p $dir
    echo $dir
}

function package_document_root() {
    local doc_root=$(jq --raw-output '.extra.heroku["document-root"] // ""' < "$BUILD_DIR/composer.json")
    echo "/app/$doc_root"
}

function package_index_file() {
    jq --raw-output '.extra.heroku["index-document"] // "index.php"' < "$BUILD_DIR/composer.json"
}

function package_apache_version() {
    jq --raw-output ".extra.heroku.engines.apache // \"default\"" < "$BUILD_DIR/composer.json"
}

function package_php_version() {
    jq --raw-output ".extra.heroku.engines.php // \"default\"" < "$BUILD_DIR/composer.json"
}

function package_php_config() {
    jq --raw-output '.extra.heroku["php-config"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_php_includes() {
    jq --raw-output '.extra.heroku["php-includes"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_apache_includes() {
    jq --raw-output '.extra.heroku["apache-includes"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_compile_cmd() {
    jq --raw-output '.extra.heroku["compile"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

BUILD_DIR="$1"
CACHE_DIR="$2"

cd "$BUILD_DIR"

# Download jq binary for JSON processing
export PATH="$HOME/bin:$PATH"
curl "http://stedolan.github.com/jq/download/linux64/jq" -L -s -o - > "$HOME/bin/jq"
chmod +x "$HOME/bin/jq"

DEFAULT_PHP="5.5.3"
DEAULT_APACHE="2.2.22"

AVAILABLE_PHP_VERSIONS=$(curl "http://${S3_BUCKET}.s3.amazonaws.com/manifest.php" 2> /dev/null)

PHP_VERSION="default"
APACHE_VERSION="default"
DOCUMENT_ROOT="/app"
INDEX_DOCUMENT="index.php"
PHP_EXTRA_CONFIG=
PHP_INCLUDES=
COMPILE_CMD=
APACHE_INCLUDES=

# Read config variables from composer.json if it exists
if [ -f "$BUILD_DIR/composer.json" ]; then
    PHP_VERSION=$(package_php_version)
    APACHE_VERSION=$(package_apache_version)
    DOCUMENT_ROOT=$(package_document_root)
    INDEX_DOCUMENT=$(package_index_file)
    PHP_EXTRA_CONFIG=$(package_php_config)
    PHP_INCLUDES=$(package_php_includes)
    COMPILE_CMD=$(package_compile_cmd)
    APACHE_INCLUDES=$(package_apache_includes)
fi

if [ "$PHP_VERSION" = "default" ]; then
    PHP_VERSION="$DEFAULT_PHP"
fi

if [ "$APACHE_VERSION" = "default" ]; then
    APACHE_VERSION="$DEFAULT_APACHE"
fi

# Look for ".*" versions, match them against all available versions
# and select the latest version which was found.
if echo "$PHP_VERSION" | grep '\*' &>/dev/null; then
    PHP_VERSION=$(echo "$AVAILABLE_PHP_VERSIONS" | grep "^$PHP_VERSION$" | sort -r | head -n1)
fi

APACHE_VERSION = "2.2.22"

VENDORED_APACHE=$(mktmpdir apache)
VENDORED_PHP=$(mktmpdir php)

echo "-----> Bundling APACHE $APACHE_VERSION}"
fetch_package_apache "$APACHE_VERSION" "$VENDORED_APACHE"

echo "-----> Bundling PHP ${PHP_VERSION}"
fetch_package php "$PHP_VERSION" "$VENDORED_PHP"

echo "-----> Vendoring binaries into slug"
[ ! -d "$BUILD_DIR/vendor" ] && mkdir -p "$BUILD_DIR/vendor"
cp -R "$VENDORED_APACHE/" "vendor/apache"
cp -R "$VENDORED_PHP/" "vendor/php"

export PATH=/app/vendor/apache/bin:/app/vendor/php/bin:/app/vendor/php/bin:$PATH

# Test that all packages were fetched and extracted successfully
test -d "vendor/apache"
test -d "vendor/php"

if [ -n "$BUILDPACK_DEBUG" ]; then
    ls -R vendor/apache
    ls -R vendor/php
fi

mkdir -p "conf"
cp "$basedir/../conf/apache/httpd.conf" "vendor/apache/conf/httpd.conf"
cp "$basedir/../conf/php/php-fpm.conf" "vendor/php/etc/php-fpm.conf"
cp "$basedir/../conf/php/php.ini" "vendor/php/etc/php.ini"

for conf in $PHP_EXTRA_CONFIG; do
    echo "$conf" >> "vendor/php/etc/php.ini"
done

for include in $PHP_INCLUDES; do
    cp "$BUILD_DIR/$include" "vendor/php/etc/conf.d"
done

test ! -d ".profile.d" && mkdir -p .profile.d || true

cat > ".profile.d/php.sh" <<SH
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/app/bin:/app/vendor/apache/bin:/app/vendor/php/sbin:/app/vendor/php/bin:/app/vendor/bin:\$PATH
SH

install_composer_deps "$BUILD_DIR"

if [ -n "$COMPILE_CMD" ]; then
    echo "-----> Running compile commands"
    for cmd in "$COMPILE_CMD"; do
        {
            echo "Running '$cmd'"
            eval "$cmd"
        } | indent
    done
fi

mkdir -p "bin"

cat > "bin/run" <<SH
#!/usr/bin/env bash

for var in \`env | cut -f1 -d=\`; do
    echo "env[\$var] = \\$\${var}" >> /app/vendor/php/etc/php-fpm.conf
done

export DOCUMENT_ROOT="$DOCUMENT_ROOT"
export INDEX_DOCUMENT="$INDEX_DOCUMENT"
export APACHE_INCLUDES="$APACHE_INCLUDES"

mkdir -p /app/vendor/apache/logs
mkdir -p /app/vendor/php/var/log
mkdir -p /app/vendor/php/run

touch /app/vendor/apache/logs/access.log \
      /app/vendor/apache/logs/error.log

touch /app/vendor/php/var/log/error.log

(tail -qF -n 0 /app/vendor/apache/logs/access.log /app/vendor/apache/logs/error.log /app/vendor/php/var/log/*.log &)

echo "Launching apache"
exec /app/vendor/apache/bin/httpd -DNO_DETACH
EOF

# post
chmod +x boot.sh

# clean the cache
rm -rf $CACHE_DIR/*

# WIN
echo "                                     ~??IIIII?I~                   "
echo "                               ~II7I77I7I:                         "
echo "                           I??II777?                               "
echo "                       :??I,II7                                    "
echo "                    +?I,=II:                    +I?                "
echo "                  +I, ?I?                      ?  ?=+              "
echo "               :?+ :?7                            ,??=,            "
echo "             ~?? II                               ,??++            "
echo "      ~:   =?+ ?I         :      =7       =?      ?I??+            "
echo "    :=+  :+=,?I          ~                       :7I??             "
echo "     ?:~+, =I                 +77777?          +7 ~                "
echo "      =?II+               ?=IIII/  +=                              "
echo "     ,?? =+I?:    =~  ?II?++??/     7= ~                           "
echo "    ??+I   ,?=+   I+?+?III\\++     =III+                           "
echo "  7                ~~=     ,|  \?III?I                             "
echo " +:+?+               ===,:??+,  /I?                                "
echo "                    ,=++?II????I???                                "
echo "                            ?|| | ||                               "
echo "                           I        :?                             "
echo "  :                       ~I|  | || |I                             "
echo "    =~:                    +?IIIII?=                               "
echo "      ,====:                                           +++         "
echo "         ~=++==++~                                     ?+,    =+++ "
echo "             ,?++??I????II+=:,                     ,~,:=~ ++?= ~+= "
echo "                    ++?+I?I?: :=?II7I7I7777??=~:,    ,==, ~    ,   "
echo "                            ~+77I7?II?II+=~=++?++=,   +?=          "
echo "-----> Feel is good                                 +=~:           "
echo ""
